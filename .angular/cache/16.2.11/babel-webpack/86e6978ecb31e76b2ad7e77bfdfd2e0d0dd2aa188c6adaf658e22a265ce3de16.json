{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let AppComponent = class AppComponent {\n  constructor(dataService) {\n    this.dataService = dataService;\n    this.usersToDisplay = []; // J'initialise le tableau vide qui va contenir le tableau.\n    this.usersToDisplayTamp = []; // J'initialise le tableau Tampon vide qui va contenir le tableau temporaire.\n    this.selectByCity = 'city';\n    this.selectByBtn = 'first'; // J'initialisee la propriété qui stocke la valeur du bouton cliqué \n    this.selectByText = ''; //J'initialise la propriété qui stocke la valeur de la saisie texte\n  }\n  //RECUPERE et STOCKE LA VALEUR du BOUTON CITY.\n  filterByLocation(receivedCity) {\n    console.log(`...dans le PARENT ==>  ${receivedCity}`);\n    this.selectByCity = receivedCity;\n    this.usersToDisplayTamp = this.usersToDisplay.filter(iterateurX => iterateurX.location[this.selectByCity].toLowerCase().includes(this.selectByText));\n  }\n  // RECUPERE et STOCKE LA VALEUR des BOUTON.\n  filteredByBtn(eventFromFilter) {\n    console.log(`valeur du click chez le Parent ==> ${eventFromFilter}`);\n    console.log(this.selectByBtn);\n    this.selectByBtn = eventFromFilter;\n    this.generalFilter();\n  }\n  // RECUPERE et STOCKE LA VALEUR du TEXTE.\n  filteredByText(receivedSearch) {\n    console.log(`...dans  le PARENT ==>  ${receivedSearch.target.value}`);\n    console.log(`I apply this filter on ${this.usersToDisplay.length} Users`);\n    this.selectByText = receivedSearch.target.value; // je target la valeur transmise dès la saisie par le champ de recherche\n    this.generalFilter();\n  }\n  // Fait le travail de FILTRE GRACE AUX VALEURS RECUPEREES.\n  generalFilter() {\n    this.usersToDisplayTamp = this.usersToDisplay.filter(iterateurX => iterateurX.name[this.selectByBtn].toLowerCase().includes(this.selectByText));\n    // ==> CE TAB TEMP. est égal au TAB FIXE filtré selon le USERMODEL (predicat) :\n    // ==> Dans ce TAB, je choisi un mode de recherche, rendu DYNAMIQUE sur l'OBJET, uniquement sur un objet, \n    // pour prendre en compte l'un des trois btn, et qui inclurait ma SAISIE DE TEXTE.\n  }\n\n  ngOnInit() {\n    //console.log(this.dataService.getUsersData());\n    this.usersToDisplayTamp = [...this.dataService.getUsersData()];\n    this.usersToDisplay = [...this.dataService.getUsersData()]; // Copie par VALEUR.\n    //this.usersToDisplayTamp = this.dataService.getUsersData(); // Copie par REFERENCE.\n    //this.usersToDisplay = this.dataService.getUsersData();\n    //ce contenent vide, j'y stocke le tableau de données et sa méthode de récupération.\n    // On ne touche pas au parent CONTROLLEUR. NI BOUCHE NI OREILLE.\n    // Mais je déclare des proprieté : mon tableau initialisé à vide, que je peux appeller dans l'enfant.\n  }\n};\n\nAppComponent = __decorate([Component({\n  selector: 'my-app',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})], AppComponent);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}